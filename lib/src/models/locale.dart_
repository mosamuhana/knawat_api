import 'package:equatable/equatable.dart';

import '../config.dart';
import '../helpers.dart';

class Locale extends Equatable {
  final Map<String, String> _map;

  Locale(Map<String, dynamic> map) : _map = _getMap(map);

  String get asString {
    if (_map != null) {
      for (var key in Config.langs) {
        if (_map.containsKey(key)) return _map[key];
      }
    }
    return '';
  }

  @override
  List<Object> get props => [_map];

  //@override bool get stringify => true;

  Locale copyWith(Map<String, String> map) {
    map ??= {};
    return Locale(
      _map.map((key, value) => MapEntry<String, String>(key, map[key] ?? value)),
    );
  }

  Map<String, dynamic> toMap() => MapHelper.filterNulls(_map);

  factory Locale.fromMap(Map<String, dynamic> map) => map == null || map.isEmpty ? null : Locale(map);

  @override
  String toString() {
    //return 'LocalizedString($str)';
    return asString;
  }
}

Map<String, String> _getMap(Map<String, dynamic> map) {
  map ??= {};
  return Map<String, String>.fromEntries(
    Config.langs.map((key) => MapEntry<String, String>(key, map[key]?.toString())),
  );
}
